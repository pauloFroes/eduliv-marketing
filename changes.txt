# Mudanças Aplicadas

## Padronização Types vs Interfaces

### Arquivos Modificados:

1. **doc/types-guidelines.md**
   - **Reescrita completa para melhor organização e legibilidade**
   - Adicionado índice com navegação
   - Seções reorganizadas com emojis para melhor identificação
   - Exemplos mais claros e objetivos
   - Checklist separado por contexto (tipos, barrel files, exports)
   - **Regra sobre não exportar tipos desnecessários documentada**
   - Formatação melhorada para consumo por equipe e agentes de IA
   - Removida redundância e informações desnecessárias
   - Adicionada seção "Types vs Interfaces" com diretrizes claras
   - Regra geral: usar `type` por padrão
   - Usar `interface` apenas para props de componentes React e APIs extensíveis
   - Adicionada seção específica sobre parâmetros e retornos de funções
   - **Removido declaration merging como opção válida**
   - **Adicionada seção explicando que declaration merging é má prática**
   - Adicionados exemplos de uso correto e incorreto
   - Atualizado checklist de criação de tipos

2. **src/helpers/cookie/cookie.types.ts**
   - Convertido `interface Cookie` para `export type Cookie`
   - Removido `export type { Cookie }` desnecessário

3. **src/helpers/notification/notification.types.ts**
   - Convertido `interface FormToast<T>` para `export type FormToast<T>`
   - Removido `export type { FormToast }` desnecessário

4. **src/types/core.types.ts**
   - Convertido `interface ResponsePromise<T>` para `export type ResponsePromise<T>`

## Padronização de Exports

### Arquivos Criados (Barrel Files):

1. **src/helpers/cookie/index.ts**
   - Barrel file para domínio cookie
   - Exporta `cookie.ts` e `cookie.types.ts`

2. **src/helpers/jwt/index.ts**
   - Barrel file para domínio jwt
   - Exporta `jwt.ts` (tipos movidos para dentro do arquivo)

3. **src/helpers/crypt/index.ts**
   - Barrel file para domínio crypt
   - Exporta `crypt.ts`

4. **src/helpers/text/index.ts**
   - Barrel file para domínio text
   - Exporta `text.ts`

5. **src/helpers/notification/index.ts**
   - Barrel file para domínio notification
   - Exporta `toast.ts` e `notification.types.ts`

6. **src/services/user/index.ts**
   - Barrel file para domínio user
   - Exporta `service.ts`, `schema.ts` e `user.types.ts`

7. **src/services/auth/index.ts**
   - Barrel file para domínio auth
   - Exporta `service.ts`, `schema.ts` e `auth.types.ts`

8. **src/lib/config/index.ts**
   - Barrel file para domínio config
   - Exporta `config.ts` e `config.types.ts`

9. **src/lib/utils/index.ts**
   - Barrel file para domínio utils
   - Exporta `utils.ts`

10. **src/lib/db/index.ts**
    - Barrel file para domínio db
    - Exporta `db.ts`

### Arquivos Modificados:

1. **doc/types-guidelines.md**
   - **Adicionada seção "Padrão de Exports"**
   - Regra geral: Export Inline + Barrel Files
   - Estrutura de barrel files documentada
   - Exemplos de imports simplificados
   - Exceções para barrel files

2. **src/services/user/service.ts**
   - **Imports atualizados para usar barrel files**
   - Imports mais limpos e organizados

3. **src/services/user/user.test.ts**
   - **Imports atualizados para usar barrel files**
   - Imports mais limpos e organizados

### Arquivos Removidos:

1. **src/helpers/jwt/jwt.types.ts**
   - **Removido porque `JwtPayload` é usado apenas internamente**
   - Tipo movido para dentro de `jwt.ts`
   - Demonstra o princípio: não exportar tipos desnecessários

### Correção Importante:

**Tipos usados apenas internamente NÃO devem ser exportados:**
```ts
// ✅ Correto - tipo usado apenas internamente
type JwtPayload = {
  userId: string
}

// ❌ Incorreto - export desnecessário
export type JwtPayload = {
  userId: string
}
```

### Padrão Estabelecido:

**Use export inline para:**
- Funções e constantes
- Tipos e interfaces
- Schemas Zod

**Crie barrel files (index.ts) para:**
- Domínios que exportam múltiplos itens
- Facilitar imports e organização

**NÃO crie barrel files para:**
- Arquivos únicos (apenas um export)
- Componentes React (mantenha import direto)
- Configurações globais

### Benefícios:
- **Imports mais limpos**: `import { cookieSet, Cookie } from '@/helpers/cookie'`
- **Organização melhorada**: Cada domínio tem seu barrel file
- **Manutenibilidade**: Fácil de adicionar/remover exports
- **Consistência**: Padrão único em todo o projeto
- **Facilita refatorações**: Mudanças centralizadas nos barrel files

### Arquivos Mantidos (seguindo o padrão):

- **src/components/form/form.tsx**: `interface FormFieldProps` ✅ (props de componente)
- **src/components/wrapper/button.tsx**: `interface ButtonProps` ✅ (props de componente)
- **src/components/wrapper/notification.tsx**: `interface NotificationTooltipProps` ✅ (props de componente)

### Padrão Estabelecido:

**Use `type` para:**
- Union types e intersection types
- Tipos inferidos de Zod
- Tipos utilitários (Pick, Omit, Partial, etc.)
- Tipos de configuração e constantes
- Tipos de contexto React
- Tipos simples de dados
- Parâmetros de funções
- Retornos de funções

**Use `interface` apenas para:**
- Props de componentes React (quando extensibilidade é importante)
- APIs públicas que podem ser estendidas

### Clarificação Importante:

**Parâmetros e retornos de funções SEMPRE devem usar `type`:**
```ts
// ✅ Correto
export const serviceUserCreate = async (params: UserCreate): Promise<boolean | ErrorType> => {
  // ...
}

// ❌ Incorreto
export const serviceUserCreate = async (params: UserCreate): Promise<boolean | ErrorType> => {
  // ...
}
```

### Benefícios:
- Consistência em todo o projeto
- Facilita manutenção e legibilidade
- Alinhado com melhores práticas globais
- Reduz confusão na escolha entre type e interface
- Clareza sobre uso de tipos em funções

## Reorganização da Documentação

### Arquivos Modificados:

1. **doc/types-guidelines.md**
   - **Reescrita completa para melhor organização e legibilidade**
   - Adicionado índice com navegação
   - Seções reorganizadas com emojis para melhor identificação
   - Exemplos mais claros e objetivos
   - Checklist separado por contexto (tipos, barrel files, exports)
   - **Regra sobre não exportar tipos desnecessários documentada**
   - Formatação melhorada para consumo por equipe e agentes de IA
   - Removida redundância e informações desnecessárias
